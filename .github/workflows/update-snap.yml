name: Check Remote Source and Build Snap

on:
  schedule:
    # Run every 12 hours (adjust cron schedule as needed)
    - cron: '0 */12 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  check-and-build:
    runs-on: ubuntu-latest # Update this to 'self-hosted' if using a self-hosted runner

    steps:
      - name: Checkout Repository (for snapcraft.yaml)
        uses: actions/checkout@v4

      - name: Download Remote AVersion
        id: download
        run: |
          wget --user-agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36" https://fonts.atipra.in/fontrapak/fontrapak/version.txt -O version.txt
          if [ $? -ne 0 ]; then echo "Download failed"; exit 1; fi
          echo "Download successful"

      #- name: Ensure Required Files Exist After Extraction
        #run: |
          #mkdir extracted_files
          #tar -xzf fontrapak.tgz -C extracted_files fontrapak/fontrapak fontrapak/version.txt
          #if [ $? -ne 0 ]; then echo "Extraction failed"; exit 1; fi
          #echo "Extraction successful"
          #if [ ! -f "extracted_files/fontrapak/fontrapak" ] || [ ! -f "extracted_files/fontrapak/version.txt" ]; then
            #echo "ERROR: Expected files not found after extraction."
            #echo "Verify the archive structure and update the extraction path."
            #ls -R extracted_files # Debugging: List extracted files
            #exit 1
          #fi

      - name: Calculate Current Hash
        id: calculate_hash
        run: |
          # Calculate hash of both files, then hash the result for a single signature
          CURRENT_HASH=$(sha256sum  version.txt | sha256sum | cut -d' ' -f1)
          echo "Current Hash: $CURRENT_HASH"
          echo "hash=$CURRENT_HASH" >> $GITHUB_OUTPUT

      - name: Restore Previous Hash (Cache)
        id: cache-hash
        uses: actions/cache/restore@v4
        with:
          path: ~/cache-dummy-dir # Cache needs a path, even if empty
          key: remote-source-hash-${{ steps.calculate_hash.outputs.hash }}
      - name: Configure iptables for LXD and Docker compatibility
        run: |
          # Allow forwarding for the Docker bridge
          sudo iptables -I FORWARD -i docker0 -o lxdbr0 -j ACCEPT
          sudo iptables -I FORWARD -i lxdbr0 -o docker0 -j ACCEPT
          # Save the iptables rules
          sudo apt-get install -y iptables-persistent
          sudo netfilter-persistent save

      - name: Install and configure LXD
        run: |
          sudo snap install lxd
          sleep 10
          sudo lxd init --auto
          if sudo lxc network show lxdbr0 > /dev/null 2>&1; then
            echo "Network lxdbr0 already exists. Skipping creation."
          else
            echo "Creating lxdbr0 network..."
            sudo lxc network create lxdbr0
          fi
          sudo lxc network attach-profile lxdbr0 default eth0
          sudo lxc network set lxdbr0 ipv4.address auto
          sudo lxc network set lxdbr0 ipv6.address none
          sudo usermod -a -G lxd $USER
          sudo lxc network list # Debugging: List configured networks
          sudo lxc list # Verify connectivity
      - name: Configure iptables for LXD and Docker compatibility
        run: |
          # Allow forwarding for the Docker bridge
          sudo iptables -I FORWARD -i docker0 -o lxdbr0 -j ACCEPT
          sudo iptables -I FORWARD -i lxdbr0 -o docker0 -j ACCEPT
          # Save the iptables rules
          sudo apt-get install -y iptables-persistent
          sudo netfilter-persistent save
      # Add a network check before building the Snap
      - name: Verify Internet Connectivity
        run: |
          ping -c 3 google.com || { echo "No internet connection. Exiting."; exit 1; }

      - name: Build Snap (if changed)
        if: steps.cache-hash.outputs.cache-hit != 'true'
        run: |
          echo "Source changed (or first run), building snap..."
          # Install snapcraft 
          sudo snap install snapcraft --classic
          for i in {1..3}; do
            sudo snapcraft --use-lxd && break || echo "Retry $i/3 failed. Retrying..." && sleep 10;
          done	
      - name: Upload to Snap Store Edge (if changed)
        if: steps.cache-hash.outputs.cache-hit != 'true'
        uses: snapcore/action-publish@v1
        with:
          store_login: ${{ secrets.SNAP_STORE_LOGIN }} # Store credentials securely
          snap: "*.snap" # Upload the built snap file
          release: edge # Release to edge channel

      - name: Save Current Hash (Cache - Implicit)
        if: steps.cache-hash.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/cache-dummy-dir
          key: remote-source-hash-${{ steps.calculate_hash.outputs.hash }}
