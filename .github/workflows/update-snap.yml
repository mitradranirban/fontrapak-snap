name: Check Remote Source and Build Snap

on:
  schedule:
    # Run every 12 hours (adjust cron schedule as needed)
    - cron: '0 */12 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  check-and-build:
    runs-on: ubuntu-latest # Update this to 'self-hosted' if using a self-hosted runner

    steps:
      - name: Checkout Repository (for snapcraft.yaml)
        uses: actions/checkout@v4

      - name: Download Remote Archive
        id: download
        run: |
          wget --user-agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36" https://fonts.atipra.in/fontrapak/fontrapak.tgz -O fontrapak.tgz
          if [ $? -ne 0 ]; then echo "Download failed"; exit 1; fi
          echo "Download successful"

      - name: Ensure Required Files Exist After Extraction
        run: |
          mkdir extracted_files
          tar -xzf fontrapak.tgz -C extracted_files fontrapak/fontrapak fontrapak/version.txt
          if [ $? -ne 0 ]; then echo "Extraction failed"; exit 1; fi
          echo "Extraction successful"
          if [ ! -f "extracted_files/fontrapak/fontrapak" ] || [ ! -f "extracted_files/fontrapak/version.txt" ]; then
            echo "ERROR: Expected files not found after extraction."
            exit 1
          fi

      - name: Calculate Current Hash
        id: calculate_hash
        run: |
          # Calculate hash of both files, then hash the result for a single signature
          CURRENT_HASH=$(sha256sum extracted_files/fontrapak/fontrapak extracted_files/fontrapak/version.txt | sha256sum | cut -d' ' -f1)
          echo "Current Hash: $CURRENT_HASH"
          echo "hash=$CURRENT_HASH" >> $GITHUB_OUTPUT

      - name: Restore Previous Hash (Cache)
        id: cache-hash
        uses: actions/cache/restore@v4
        with:
          path: ~/cache-dummy-dir # Cache needs a path, even if empty
          key: remote-source-hash-${{ steps.calculate_hash.outputs.hash }}

      - name: Install and configure LXD
        run: |
          sudo snap install lxd
          # Wait for snap service to be fully available
          sleep 10
          sudo lxd init --auto
          # Add current user to lxd group - in Actions runner context
          sudo usermod -a -G lxd $USER
          # Verify LXD is working
          sudo lxc --version
          sudo lxc list

      - name: Build Snap (if changed)
        if: steps.cache-hash.outputs.cache-hit != 'true'
        run: |
          echo "Source changed (or first run), building snap..."
          # Install snapcraft 
          sudo snap install snapcraft --classic
          sudo snapcraft --use-lxd

      - name: Upload to Snap Store Edge (if changed)
        if: steps.cache-hash.outputs.cache-hit != 'true'
        uses: snapcore/action-publish@v1
        with:
          store_login: ${{ secrets.SNAP_STORE_LOGIN }} # Store credentials securely
          snap: "*.snap" # Upload the built snap file
          release: edge # Release to edge channel

      - name: Save Current Hash (Cache - Implicit)
        if: steps.cache-hash.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/cache-dummy-dir
          key: remote-source-hash-${{ steps.calculate_hash.outputs.hash }}
